import tensorflow as tf
 from tensorflow.keras.models import Sequential
 from tensorflow.keras.layers import Dense, Flatten
 import pandas as pd
 import numpy as np
 import matplotlib.pyplot as plt
 from sklearn.model_selection import train_test_split
 from sklearn.metrics import classification_report
 from tensorflow.keras.datasets import cifar10
 # Define class names for CIFAR-10
 class_names = ['airplane', 'automobile', 'bird', 'cat', 'deer',
               'dog', 'frog', 'horse', 'ship', 'truck']
 # Load CIFAR-10 directly from TensorFlow (automatically downloads if 
needed)
 (x_train, y_train), (x_test, y_test) = cifar10.load_data()
 # Flatten images into rows to mimic CSV-style structure
 train_data = pd.DataFrame(x_train.reshape(x_train.shape[0], -1))
 train_data['label'] = y_train
 test_data = pd.DataFrame(x_test.reshape(x_test.shape[0], -1))

 x_train = train_data.iloc[:, :-1].values
 y_train = train_data['label'].values.flatten()
 x_test = test_data.values
 # Normalize pixel values (0â€“1)
 x_train = x_train / 255.0
 x_test = x_test / 255.0
 # Reshape back to 32x32x3 images
 x_train = x_train.reshape(-1, 32, 32, 3)
 x_test = x_test.reshape(-1, 32, 32, 3)
 # One-hot encode labels
 y_train_encoded = tf.keras.utils.to_categorical(y_train, 10)
 # Split training and validation sets
 x_train_split, x_val, y_train_split, y_val = train_test_split(
    x_train, y_train, test_size=0.2, random_state=42
 )
 # One-hot encode training split labels
y_train_split_encoded = tf.keras.utils.to_categorical(y_train_split, 
10)
 model = Sequential([
    Flatten(input_shape=(32, 32, 3)),
    Dense(512, activation='relu'),
    Dense(256, activation='relu'),
    Dense(128, activation='relu'),
    Dense(10, activation='softmax')
 ])
 model.compile(optimizer='adam',
              loss='categorical_crossentropy',
              metrics=['accuracy'])
 history = model.fit(
    x_train_split, y_train_split_encoded,
    epochs=10,
    batch_size=32,
    validation_data=(x_val, tf.keras.utils.to_categorical(y_val, 10))
 )
 plt.figure(figsize=(12, 4))
 plt.plot(history.history['accuracy'], label='Training Accuracy')
 plt.plot(history.history['val_accuracy'], label='Validation Accuracy')
 plt.title('Model Accuracy')
 plt.xlabel('Epoch')
 plt.ylabel('Accuracy')
 plt.legend()
 plt.show()
